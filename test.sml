use "utils.sml";
use "variable.sml";
use "clause.sml";
use "set.sml";
use "dp.sml";

(* isIncludeIn([], []); *)
(* isIncludeIn([], [1]); *)
 isIncludeIn([~1], [~1]);
(* val a = (BoolValue2Bool(signOfVariable(1))); *)
(* val a = (DEFINED(false) = signOfVariable(~1)); *)
(* val t = print("AZEAZe\n");					      *)
(* isIncludeIn([1], [1, 2]); *)
(* isIncludeIn([1], [2]); *)

val l
  =[[~1],[~25,~19,~1,13],[~25,~19,7,~1],[~25,~19,~13,~1],[~25,~19,~13,~7],[~1],[~1,~7],[~1,13],[~1,7],[~1,~13],[~1,~13,~7],[~1,19],[~1,7],[~1,7,13],[~1,7],[~1,7,~13],[~1,13],[~1,13,~7],[~1,13],[~1,13,7],[~1,~19],[~1,~19,~7],[~1,~19,13],[~1,~19,7],[~1,~19,~13],[~1,~19,~13,~7],[~1,25],[7,~1],[7,~1,13],[7,~1],[7,~1,~13],[7,~1],[7,~1,13],[7,~1],[7,~13,~1],[7,19],[7,13,~1],[7,13,~1],[7,13,~1],[7,~19,~1],[7,~19,~1,13],[7,~19,~1],[7,~19,~13,~1],[7,25],[13,~1],[13,~1,~7],[13,~1],[13,~1,7],[13,7,~1],[13,7,~1],[13,7,~1],[13,~1],[13,~1,~7],[13,~1],[13,7,~1],[13,19],[13,~19,~1],[13,~19,~1,~7],[13,~19,~1],[13,~19,7,~1],[13,25],[19,~1],[19,~1,~7],[19,~1,~13],[19,~1,~13,~7],[19,~1],[19,25],[~25,~1],[~25,~1,~7],[~25,~1,13],[~25,~1,7],[~25,~1,~13],[~25,~1,~13,~7],[~25,~1,19],[~25,7,~1],[~25,7,~1,13],[~25,7,~1],[~25,7,~13,~1],[~25,13,~1],[~25,13,~1,~7],[~25,13,~1],[~25,13,7,~1],[~25,~19,~1],[~25,~19,~1,~7]];

val c1 = hd(l);
val c2 = hd(tl(l));


(* isIncludeIn(c1, c2); *)
(* signedVariableIsInClause(c2, hd(c1)); *)
(* signOfVariableInClauseEquals(c2, hd(c1), signOfVariable(hd(c1))); *)
(* val a = signOfVariable(hd(c1)); *)

(* val res : Clause list = (List.filter (fn c => not(isIncludeIn(hd(l), c))) (tl(l))); *)
(* displayL2(filterIncludedClause(l, 0)) *)
